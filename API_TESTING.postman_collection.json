{
	"info253": {
		"_postman_id": "2c56038e-cd56-4892-aa9d-eb18d05d415f",
		"name": "API_TESTING",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Тест верного формата ответов API",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c2be77cb-df99-4823-8e4a-0568d6396465",
						"exec": [
							"//1. Correct response format JSON\r",
							"pm.test(\"Correct response format JSON\", function() {\r",
							"    pm.response.to.have.jsonBody()\r",
							"});\r",
							"//2. We have all the declared fields in the response\r",
							"pm.test(\"Check that We have all the declared fields\", function(){\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"people\");\r",
							"    pm.expect(jsonData).to.have.property(\"planets\");\r",
							"    pm.expect(jsonData).to.have.property(\"films\");\r",
							"    pm.expect(jsonData).to.have.property(\"species\");\r",
							"    pm.expect(jsonData).to.have.property(\"vehicles\");\r",
							"    pm.expect(jsonData).to.have.property(\"starships\");\r",
							"})\r",
							"\r",
							"//3. Field value is not NULL\r",
							"pm.test(\"Check if value is not NULL\", function(){\r",
							"    var jsonData = pm.response.json();  \r",
							"    pm.expect(jsonData.people).not.equal(null)\r",
							"    pm.expect(jsonData.planets).not.equal(null)\r",
							"    pm.expect(jsonData.films).not.equal(null)\r",
							"    pm.expect(jsonData.species).not.equal(null)\r",
							"    pm.expect(jsonData.vehicles).not.equal(null)\r",
							"    pm.expect(jsonData.starships).not.equal(null) \r",
							"})\r",
							"\r",
							"//4. Check if value is not empty\r",
							"pm.test(\"Check if value is not empty\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.people).not.equal(\"\")\r",
							"    pm.expect(jsonData.planets).not.equal(\"\")\r",
							"    pm.expect(jsonData.films).not.equal(\"\")\r",
							"    pm.expect(jsonData.species).not.equal(\"\")\r",
							"    pm.expect(jsonData.vehicles).not.equal(\"\")\r",
							"    pm.expect(jsonData.starships).not.equal(\"\") \r",
							"})\r",
							"\r",
							"//5. Check if field corresponds to a specific value\r",
							"pm.test(\"Check if field corresponds to a specific value\",function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.people).to.equal(\"http://swapi.dev/api/people/\");\r",
							"    pm.expect(jsonData.planets).to.equal(\"http://swapi.dev/api/planets/\");\r",
							"    pm.expect(jsonData.films).to.equal(\"http://swapi.dev/api/films/\");\r",
							"    pm.expect(jsonData.species).to.equal(\"http://swapi.dev/api/species/\");\r",
							"    pm.expect(jsonData.vehicles).to.equal(\"http://swapi.dev/api/vehicles/\");\r",
							"    pm.expect(jsonData.starships).to.equal(\"http://swapi.dev/api/starships/\"); \r",
							"})\r",
							"\r",
							"//6. Status kode is 200\r",
							"pm.test(\"Status kode is 200\",function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"//7. Status messages is OK\r",
							"pm.test(\"Status messages is OK\",function(){\r",
							"    pm.response.to.have.status(\"OK\")\r",
							"})\r",
							"\r",
							"//8. Response time is less than 1000 ms\r",
							"pm.test(\"Response time is less than 1000 ms\",function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"//9. There is a specific header in the response\r",
							"pm.test(\"There is a specific header in the response\", function(){\r",
							"    pm.response.to.have.header(\"Content-Type\")\r",
							"})\r",
							"\r",
							"//10. The response has a specific header with a specific value\r",
							"pm.test(\"The response has a specific header with a specific value\", function(){\r",
							"    pm.response.to.be.header(\"Content-Type\",\"application/json\")\r",
							"})\r",
							"\r",
							"//11. Cookie exists\r",
							"pm.test(\"Cookie exists\",function(){\r",
							"    pm.cookies.has(\"\")\r",
							"})\r",
							"\r",
							"//12. Cookie has value\r",
							"pm.test(\"Cookie has value\", function(){\r",
							"    try{\r",
							"        var MY_COOKIE = pm.cookies.get(\"\");\r",
							"        console.log(MY_COOKIE)\r",
							"    } catch(e) {\r",
							"        console.log(\"SOME PROBLEM WITH COOKIE\" + e)\r",
							"    }\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://swapi.dev/api/",
					"protocol": "http",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Тест ответа API с помощью JSON Schem\\",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b6d68b99-3942-4890-b9a9-77e83de65e35",
						"exec": [
							"var data = JSON.parse(responseBody);\r",
							"\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\"name\",\"homeworld\", \"films\", \"species\", \"vehicles\", \"starships\"],\r",
							"    \"property\": {\r",
							"        \"name\": {\"type\":\"string\"},\r",
							"        \"homeworld\": {\"type\":\"string\"},\r",
							"        \"films\": {\r",
							"            \"type\":\"array\",\r",
							"             \"items\": {\"type\":\"string\"}\r",
							"        },\r",
							"        \"species\":{\r",
							"            \"type\":\"array\",\r",
							"            \"items\":{\"type\":\"string\"}\r",
							"        },\r",
							"        \"vehicles\": {\r",
							"            \"type\":\"array\",\r",
							"            \"items\": {\"type\":\"string\"}\r",
							"        },\r",
							"         \"starships\": {\r",
							"            \"type\":\"array\",\r",
							"            \"items\": {\"type\":\"string\"}\r",
							"        },\r",
							"    }\r",
							"};\r",
							"pm.test(\"Body is correct\", function(){\r",
							"    pm.expect(tv4.validate(data,schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://swapi.dev/api/people/1",
					"protocol": "http",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						"people",
						"1"
					]
				},
				"description": "Тестирование ответа API с помощью JSON Schem"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "ced0c112-81be-4ebf-aa5b-ddc32c62682b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "7ed83478-6903-407f-afe2-ce26ebf7366c",
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status is ok, response is json\", function () {",
					"    pm.response.to.be.ok;",
					"    pm.response.to.be.json;",
					"});"
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}